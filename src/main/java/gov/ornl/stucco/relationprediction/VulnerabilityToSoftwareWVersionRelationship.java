package gov.ornl.stucco.relationprediction;
//This class stores relationships between a vulnerability and one of the software product versions that is vulnerable to it.
//software stores information about the software product version.  Vulnerability stores information about the vulnerability.
//functionnames and filenames are where the software product is vulnerable.

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.ArrayList;


public class VulnerabilityToSoftwareWVersionRelationship 
{
	private SoftwareWVersion software;
	private Vulnerability vulnerability;
	private HashSet<String> functionnames;
	private HashSet<String> filenames;
	
	
	private static HashMap<String,VulnerabilityToSoftwareWVersionRelationship> primarykeyTorelationship;
	private static HashMap<String,ArrayList<VulnerabilityToSoftwareWVersionRelationship>> filenameTorelationships;
	private static HashMap<String,ArrayList<VulnerabilityToSoftwareWVersionRelationship>> functionnameTorelationships;
	
	
	private VulnerabilityToSoftwareWVersionRelationship(SoftwareWVersion software, Vulnerability vulnerability)
	{
		this.software = software;
		this.vulnerability = vulnerability;
		
		software.addRelationship(this);
		vulnerability.addRelationship(this);
	}
	
	
	public Vulnerability getVulnerability()
	{
		return vulnerability;
	}
	
	public SoftwareWVersion getSoftwareWVersion()
	{
		return software;
	}
	
	public HashSet<String> getFunctionNames()
	{
		return functionnames;
	}
	
	public HashSet<String> getFileNames()
	{
		return filenames;
	}
	
	
	public void setFunctionNames(HashSet<String> functionnames)
	{
		if(functionnameTorelationships == null)
			functionnameTorelationships = new HashMap<String,ArrayList<VulnerabilityToSoftwareWVersionRelationship>>();
		
		if(functionnames.size() > 0)
			this.functionnames = functionnames;
		
		for(String functionname : functionnames)
		{
			ArrayList<VulnerabilityToSoftwareWVersionRelationship> relationships = functionnameTorelationships.get(functionname);
			if(relationships == null)
			{
				relationships = new ArrayList<VulnerabilityToSoftwareWVersionRelationship> ();
				functionnameTorelationships.put(functionname, relationships);
			}
			relationships.add(this);
		}
	}
	
	public void setFileNames(HashSet<String> filenames)
	{
		if(filenameTorelationships == null)
			filenameTorelationships = new HashMap<String,ArrayList<VulnerabilityToSoftwareWVersionRelationship>>();
			
		if(filenames.size() > 0)
			this.filenames = filenames;
		
		for(String filename : filenames)
		{
			ArrayList<VulnerabilityToSoftwareWVersionRelationship> relationships = filenameTorelationships.get(filename);
			if(relationships == null)
			{
				relationships = new ArrayList<VulnerabilityToSoftwareWVersionRelationship> ();
				filenameTorelationships.put(filename, relationships);
			}
			relationships.add(this);
		}
	}
	
	
	public static HashMap<String,VulnerabilityToSoftwareWVersionRelationship> getPrimaryKeyToRelationship()
	{
		if(primarykeyTorelationship == null)
			GenericCyberEntityTextRelationship.loadAllKnownRelationships();
			
		return primarykeyTorelationship;
	}
	
	
	public static ArrayList<VulnerabilityToSoftwareWVersionRelationship> getRelationshipsWithFileName(String filename)
	{
		if(filenameTorelationships == null)
			GenericCyberEntityTextRelationship.loadAllKnownRelationships();
		
		return filenameTorelationships.get(filename);
	}
	
	public static ArrayList<VulnerabilityToSoftwareWVersionRelationship> getRelationshipsWithFunctionName(String functionname)
	{
		if(functionnameTorelationships == null)
			GenericCyberEntityTextRelationship.loadAllKnownRelationships();
		
		return functionnameTorelationships.get(functionname);
	}
	
	//If the relationship has already been created (and is therefore in the primarykeyTorelationship map), get it from the map and return it.  Else, create it, put it in the map, and return it.
	public static VulnerabilityToSoftwareWVersionRelationship getRelationship(SoftwareWVersion software, Vulnerability vulnerability)
	{
		if(primarykeyTorelationship == null)
			primarykeyTorelationship = new HashMap<String,VulnerabilityToSoftwareWVersionRelationship>();
		
		String primarykey = getPrimaryKey(software, vulnerability);
		
		VulnerabilityToSoftwareWVersionRelationship result = primarykeyTorelationship.get(primarykey);
		if(result == null)
		{
			result = new VulnerabilityToSoftwareWVersionRelationship(software, vulnerability);
			primarykeyTorelationship.put(primarykey, result);
		}
		
		return result;
	}
	
	public static String getPrimaryKey(SoftwareWVersion software, Vulnerability vulnerability)
	{
		String softwareid = software.getSoftwareID();
		String vulnerabilityid = vulnerability.getCVEID();
		
		return softwareid + " " + vulnerabilityid;
	}
	
	public String getPrimaryKey()
	{
		return getPrimaryKey(software, vulnerability);
	}

	public static Set<String> getAllFileNames()
	{
		if(filenameTorelationships == null)
			GenericCyberEntityTextRelationship.loadAllKnownRelationships();
			
		return filenameTorelationships.keySet();
	}

	public static Set<String> getAllFunctionNames()
	{
		if(functionnameTorelationships == null)
			GenericCyberEntityTextRelationship.loadAllKnownRelationships();
		
		return functionnameTorelationships.keySet();
	}
}
